/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PROGRAMMING QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: Name a data structure that can replicate a cache and why
A: Splay trees as they are designed to provide a faster access to the same piece of data for the second time

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//C++ QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q: What is the difference between a pointer and a reference?
A:  - pointers hold a memory address for the variable, references are another name for the variable
    - pointers must be dereferenced to use the variable
    - pointers can change what they point to, references cannot
    - pointers can be null, references cannot

Q: What are some circumstances where using a pointer is preferable to using a reference?
A: When the variable may be null or not exist or when you require pointer maths on an array

Q: What obstacles preventing use of const correct interfaces in new classes that are being written? 
A: If the class wraps or uses a class that does not use it

Q: What is the difference between const char* and char *const?
A: const char* is a pointer to a const char variable while char *const is a constant pointer to a char variable

Q: What is function overloading?
A: When multiple functions have the same name but differ by number/type of arguments and 
   for pointer/reference arguments only whether const or non-const

Q: What is a function pointer, and can you name a use?
A: A pointer that holds the address of a function. Used for callbacks and passing with events.

Q: What is recursion, and what would normally happen if recursion went too deep?
A: Calling the function within the function. Will cause stack overflow if going too deep.

Q: What kind of values can be used as a default value?
A: Constant, ternary expressions, global and static variables, static and non-member functions

Q: What the two operators used for de-referencing pointers to member functions? 
A: ->* and .*

Q: How do you take the address of an overloaded function?
A: You need to cast it to the overload you require: (void(MyClass::*)(double))&MyClass::MyMethod

Q: Is there a way to inline a function without using the inline keyword?
A: The compiler will ultimately determine what is inlined or not. By giving the function 
   declaration a body in the header file this suggests inlining without the inline keyword.

Q: Describe any circumstances where the inline keyword would not inline a function.
A: If the compiler decides the function is not optimized by doing so

Q: What are the five operators that cannot be overloaded.
A: .       The membership operator
   .*      The pointer-to-member operator
   ::      The scope-resolution operator
   ?:      The conditional operator
   sizeof  The sizeof operator

Q: How are prefix and postfix versions of operator++() differentiated?
A: Prefix returns a reference to the object incremented while postfix returns a copy incremented

Q: What is a conversion or cast operator, and provide an example where one might be useful?
A: Allows casting the class object to a different variable type, useful for casting between user-defined types

Q: Name a circumstance where the compiler will invisibly generate a temporary due to operator overloading.
A: If there is no direct match for the given argument and a match where the compiler can implicitly cast.

Q: Name the overloaded operator that is not inherited by derived classes.
A: Assignment Operator

Q: What does the static keyword mean when used on a local variable of a function?
A: When the function is first called, the variable is initialised to the given value which 
   is maintained between calls to that same function as its stored in a special memory segment

Q: What common mistake when using static members will cause a linker error?
A: Not initialising them in the cpp file

Q: What is the purpose of the extern keyword?
A: For global variables it allows external access accross multiple files

Q: When are static local variables in functions constructed?
A: On startup, initialised to 0 and then re-initialised to the given value when the function is first called

Q: When are global objects and static member objects constructed and destructed?
A: On startup, they are initialised to 0 or the value given to them for inialisation. 
   They are destructed when the program exits.

Q: What determines the construction order for global objects and static members, and why could it be a problem?
A: Global and static members are initialised before the application but there is no guarantee of initialisation order.
   This can be a problem is some global or static members rely on others for initialisation.

Q: When should you use multiple inheritance?
A: When a class needs functionality from multiple classes

Q: What is virtual inheritance and when should it be used?
A: Used when the inheritance pattern is diamond shaped and allows inherited classes that 
   have the same base class to share that class.

Q: What is the difference between public, protected and private inheritance?
A:  - Public inheritance does not change the visibility of base members at all.
    - Protected inheritance blocks outside use of base public members as they are seen as protected.
    - Private inheritance blocks outside use of base public/protected members as they are seen as private.
    - All inheritance internally within the derived class does not change visibility

Q: Why does changing the private members of a class cause recompilation of anything using the class?
A: Private data members can change the size of the object and participate in function overload resolution

Q: What is the difference between a structure and class?
A: Structure members/inheritance public by default, class members/inheritance private by default

Q: When is using friend functions a good idea?
A: For obtaining the opposite operator overloading calling order ie. x * obj

Q: When is using friend classes a good idea?
A: When there is tight coupling and a close relationship between the two classes ie. Visitor pattern

Q: How can the using keyword be used in a class?
A: To define a namespace within the class or prevent data hiding of base class members

Q: Is it ever a good idea to use "delete this" in a member function?
A: No as it calls the destructor. Any code in the function after the call may cause an exception.

Q: What is a destructor, and what are two ways it is called?
A: Explicitly through ~MyClass() or delete this or implicitly when the object goes out of scope

Q: What is a default constructor, and when does the compiler automatically generate one? 
A:

Q: What is a copy constructor, and when does the compiler automatically call one?
A:

Q: What is the difference between a copy constructor and an overloaded assignment operator?
A:

Q: When do you need to provide a copy constructor and assignment operator?
A:   - When there are members that cannot be automatically copied (reference variables)
     - When deep copying is required

Q: What is a conversion constructor, and when does the compiler automatically call one? 
A:

Q: Name two situations where you must use an initialisation list as opposed to assignment in constructors. 
A: For const and reference members

Q: Can the 'this' pointer be used inside a constructor?
A: Yes however it is dangerous to do so for virtual method

Q: Will the compiler execute items in the initialiser list in the order that they appear in the list?
A: No. They will execute in the order they appear in the class

Q: What is the purpose of the explicit keyword?
A: For single argument constructors to prevent implicit casts from the argument type to the class type

Q: Why might a class have a private destructor?
A:

Q: How is a virtual function different to a normal function?    
A:

Q: How do you define an abstract base class, and what is its purpose?
A: It prevents any instances of the class from being constructed. Defined by =0 after any method.

Q: When is a virtual destructor necessary?
A: 

Q: What is a v-table, how is it represented and what implications does this have for usage of byte manipulating functions such as memset?
A:

Q: Are virtual functions slow? Explain.
A:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//PERSONAL QUESTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

ANSWER STRUCTURE: Situation, Action, Response

1) What is your greatest Strength?
2) What is your greatest Weakness?
3) What was one challenging interaction with a teammate?
4) What are your goals for five years from now?
5) Tell me about a time when you had to do something you really didn’t like doing
6) What would you do if you disagreed with your boss?
7) Tell me about a time when you made a mistake. How did you deal with it?
8) Why should I give you the job?
9) What do you know about the company or position?